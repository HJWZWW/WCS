#include <ESP8266.h>

/*
   采用外接电源单独供电，2 3口作为软串口接PC机作为调试端
   1 0为串口，连接WIFI模块
*/
#include <SoftwareSerial.h>
#include "edp.c"
#include <Wire.h>
#include<Arduino.h>
#include<math.h>
#define KEY  "bI3XmShlq6rEJQn8kfslZAlrHz0="    //APIkey 
#define ID   "576044570"                          //设备ID
//#define PUSH_ID “680788”
#define PUSH_ID NULL
#define test 13 
// 串口
#define _baudrate   9600
#define _rxpin      3
#define _txpin      2
#define WIFI_UART   dbgSerial
#define DBG_UART    Serial    //调试打印串口
SoftwareSerial dbgSerial( _txpin, _rxpin ); // 软串口，调试打印
edp_pkt *pkt;
//小车驱动
#define motorLpin1 11                             //定义IN1引脚
#define motorLpin2 12                             //定义IN2引脚
#define motorLpwm 10                             //定义ENA引脚
#define motorRpin1 8                             //定义IN3引脚
#define motorRpin2 7                             //定义IN4引脚
#define motorRpwm 9                              //定义ENB引脚
#define echomotorR A0                             //定义A0为超声波转动
#define echomotorB A1                             //定义A0为超声波转动
/*
* doCmdOk
* 发送命令至模块，从回复中获取期待的关键字
* keyword: 所期待的关键字
* 成功找到关键字返回true，否则返回false
*/
//超声波
//VCC接5V
int led =4;
int shuchu=5;
int shuru=6;//Echo回波
int gnd=11;
float distancecm;
float temp;
char distancecm1;
char k[18]="keep.";
bool doCmdOk(String data, char *keyword)
{
  bool result = false;
  if (data != "")   //对于tcp连接命令，直接等待第二次回复
  {
    WIFI_UART.println(data);  //发送AT指令
    DBG_UART.print("SEND: ");
    DBG_UART.println(data);
    DBG_UART.println(WIFI_UART.readStringUntil('\n'));
  }
  if (data == "AT")   //检查模块存在
  {
    delay(2000);
  }
  else{
    while (!WIFI_UART.available());  // 等待模块回复
  }
  
  delay(200);
  
  if (WIFI_UART.find(keyword))   //返回值判断
  {
    DBG_UART.println("do cmd OK");
    result = true;
  }
  else
  {
    
    DBG_UART.println("do cmd ERROR");
    result = false;
  }
  while (WIFI_UART.available()) WIFI_UART.read();   //清空串口接收缓存
  delay(500); //指令时间间隔
  return result;
}
//小车基本指令
void run123()
{
  digitalWrite(motorLpin1,HIGH);
  digitalWrite(motorLpin2,LOW);
  digitalWrite(motorRpin1,HIGH);
  digitalWrite(motorRpin2,LOW);
  int i;
  int n;
  for(i=50,n=0;n<2;i+=50,n++)
  {
    analogWrite(motorRpwm,i);
    analogWrite(motorLpwm,i); delay(500);
  }
 //delay(100);
}
void back()
{
  digitalWrite(motorLpin1,LOW);
  digitalWrite(motorLpin2,HIGH);
  digitalWrite(motorRpin1,LOW);
  digitalWrite(motorRpin2,HIGH);
  int i;
  int n;
  for(i=0,n=0;n<5;i+=50,n++)
  {
    analogWrite(motorRpwm,i);
    analogWrite(motorLpwm,i); delay(500);
  }
 //delay(100);

}
void motor123(int motorpin1,int motorpin2,int motorpwm,int val)  //定义一个电机转动函数
{
pinMode(motorpin1,OUTPUT);                       //输出第一个引脚
pinMode(motorpin2,OUTPUT);                       //输出第二个引脚
digitalWrite(motorpin1,1);                       //将第一个引脚置高
digitalWrite(motorpin2,0);                       //将第二个引脚抬低
analogWrite(motorpwm,val);                       //给EN引脚设定模拟值，设定转速
}
void Left(int Lspeed,int Rspeed)  //向左转的函数
{
  int Lspeed1=Lspeed;
  int Rspeed1=Rspeed;
  motor123(motorLpin1,motorLpin2,motorLpwm,Lspeed1);
  motor123(motorRpin2,motorRpin1,motorRpwm,Rspeed1);
 }
 void Right(int Lspeed,int Rspeed)  //向右转的函数
{
  int Lspeed1=Lspeed;
  int Rspeed1=Rspeed;
  motor123(motorLpin2,motorLpin1,motorLpwm,Lspeed1);
  motor123(motorRpin1,motorRpin2,motorRpwm,Rspeed1);
 }
 void Shache()
 {
pinMode(motorLpin1,OUTPUT);                       //输出第一个引脚
pinMode(motorLpin2,OUTPUT);                       //输出第二个引脚
digitalWrite(motorLpin1,0);                       //将左轮第一个引脚置低
digitalWrite(motorLpin2,0);                       //将左轮第二个引脚置低
analogWrite(motorLpwm,0);                       //给ENA引脚设定模拟值，设定转速为零

pinMode(motorRpin1,OUTPUT);                       //输出第一个引脚
pinMode(motorRpin2,OUTPUT);                       //输出第二个引脚
digitalWrite(motorRpin1,0);                       //将右轮第一个引脚置低  
digitalWrite(motorRpin2,0);                       //将右轮第二个引脚置低
analogWrite(motorRpwm,0);                       //给ENB引脚设定模拟值，设定转速
  
  }

void setup()
{
  pinMode(echomotorR,OUTPUT);
  pinMode(echomotorB,OUTPUT);
  pinMode(shuchu,OUTPUT);//超声波的trig触发
  pinMode(shuru,INPUT);//超声波echo收集
  pinMode(led,OUTPUT);
  pinMode(test,OUTPUT);
  char buf[100] = {0};
  int tmp;
  WIFI_UART.begin( _baudrate );
  DBG_UART.begin( _baudrate );
  WIFI_UART.setTimeout(3000);    //设置find超时时间
  delay(3000);
  DBG_UART.println("I am a piece of shit!");
  delay(2000);
  while (!doCmdOk("AT", "OK"));
  {  
  digitalWrite(4,HIGH); 
  }
  while (!doCmdOk("AT", "OK"));      //如果不成功把这条注释掉
  while (!doCmdOk("AT+CWMODE=3", "OK"));    //工作模式
  while (/*!doCmdOk("AT+CWJAP=\"amaz\",\"jjjjjjjj\"", "OK")*/!doCmdOk("AT+CWJAP=\"Honor V10\",\"wcshzl6190\"", "OK")); //wifi名称，wifi密码
  while (!doCmdOk("AT+CIPSTART=\"TCP\",\"183.230.40.39\",876", "CONNECT"));//CONNECT,Linked
  while (!doCmdOk("AT+CIPMODE=1", "OK"));           //透传模式
  while (!doCmdOk("AT+CIPSEND", ">"));              //开始发送
}
void loop()
{
  static int edp_connect = 0;
  bool trigger = false;
  edp_pkt rcv_pkt;
  unsigned char pkt_type;
  int i, tmp;
  char num[10];
  /* EDP 连接 */
  if (!edp_connect)
  {
    while (WIFI_UART.available()) WIFI_UART.read(); //清空串口接收缓存
    packetSend(packetConnect(ID, KEY));             //发送EPD连接包
    while (!WIFI_UART.available());                 //等待EDP连接应答
    if ((tmp = WIFI_UART.readBytes(rcv_pkt.data, sizeof(rcv_pkt.data))) > 0 )
    {
      rcvDebug(rcv_pkt.data, tmp);
      if (rcv_pkt.data[0] == 0x20 && rcv_pkt.data[2] == 0x00 && rcv_pkt.data[3] == 0x00)
      {
        edp_connect = 1;
        DBG_UART.println("EDP connected.");
      }
      else
        DBG_UART.println("EDP connect error.");
    }
    packetClear(&rcv_pkt);
  }

/*//上传数据   此处我没有用到，给出一个实例。
if (edp_connect && trigger){
  char arrey[10]="keep";
  //sprintf(distancecm1,"%d",distancecm);
  packetSend(packetDataSaveTrans(NULL, "keep",arrey));    //发送的数据必须为字符串
  delay(2000);
}*/


  //EDP控制
  while (WIFI_UART.available())
  {
    readEdpPkt(&rcv_pkt);
    if (isEdpPkt(&rcv_pkt))
    {
      pkt_type = rcv_pkt.data[0];
      switch (pkt_type)
      {
        case CMDREQ:
          char edp_command[50];
          char edp_cmd_id[40];
          long id_len, cmd_len, rm_len;
          char datastr[20];
          char val[10];
          char val2[10];
          char val3[10];
          char val4[10];
          char wd1[10];
          
          //int value=1;
          memset(edp_command, 0, sizeof(edp_command));
          memset(edp_cmd_id, 0, sizeof(edp_cmd_id));
          edpCommandReqParse(&rcv_pkt, edp_cmd_id, edp_command, &rm_len, &id_len, &cmd_len);
          DBG_UART.print("rm_len: ");
          DBG_UART.println(rm_len, DEC);
          delay(10);
          DBG_UART.print("id_len: ");
          DBG_UART.println(id_len, DEC);
          delay(10);
          DBG_UART.print("cmd_len: ");
          DBG_UART.println(cmd_len, DEC);
          delay(10);
          DBG_UART.print("id: ");
          DBG_UART.println(edp_cmd_id);
          delay(10);
          DBG_UART.print("cmd: ");
          DBG_UART.println(edp_command);
          DBG_UART.println(distancecm);
          //数据处理与应用中EDP命令内容对应
          //第一条为简单实例，控制小灯开关，示例中格式为  datastream:[1/0] 
          //EDP控制
          sscanf(edp_command, "%[^:]:%s", datastr, val);
          if (atoi(val) == 1){
          digitalWrite(13, HIGH);
          }   
          else if(atoi(val)==0){
          digitalWrite(13, LOW);
          }
          sscanf(edp_command, "%[^:]:%s", datastr, val2);
          if (atoi(val2) == 2){
            for(int i=0;i<16;i++){
          digitalWrite(shuchu, LOW); //给Trig发送一个低电平  
          delayMicroseconds(2);    //等待 2微秒 
          digitalWrite(shuchu,HIGH); //给Trig发送一个高电平
          delayMicroseconds(10);    //等待 10微秒
          digitalWrite(shuchu, LOW); //给Trig发送一个低电平
          temp = float(pulseIn(shuru, HIGH));//存储回波等待时间
          distancecm = (temp * 17 )/1000; //把回波时间换算成cm
          dtostrf(distancecm,1,2,wd1);
          packetSend(packetDataSaveTrans(NULL,datastr,wd1));
          analogWrite(A0,195);
          analogWrite(A1,0);
          delay(185);
          analogWrite(A0,0);
          analogWrite(A1,0);
          delay(3000);
          }
            for(int i=0;i<16;i++){
          analogWrite(A0,0);
          analogWrite(A1,180);
          delay(177);
          analogWrite(A0,0);
          analogWrite(A1,0);
          delay(100);
          }
          }
          else if(atoi(val2)==0){
          }
          //packetSend(packetDataSaveTrans(NULL, datastr, val));//将新数据值上传至数据流
          //packetSend(packetDataSaveTrans(NULL, datastr, val2));
          //packetSend(packetDataSaveTrans(NULL,datastr,wd1));
          sscanf(edp_command, "%[^:]:%s", datastr, val3);
          if (atoi(val3) == 10086){
            for(int k=0;k<=1000;k++){
          packetSend(packetDataSaveTrans(NULL,datastr,k));
          delay(8000);
          }  
          }
          else if(atoi(val3)==11111){
          digitalWrite(test, LOW);
          }
          sscanf(edp_command, "%[^:]:%s", datastr, val4);
          //前后左右刹
          if(atoi(val4)==3){
             run123();
             packetSend(packetDataSaveTrans(NULL,datastr,val4));
           }
          else if(atoi(val4)==6){
            back();
            packetSend(packetDataSaveTrans(NULL,datastr,val4));
            }
          else if(atoi(val4)==4){
            Left(80,80);
            packetSend(packetDataSaveTrans(NULL,datastr,val4));
            }
          else if(atoi(val4)==5){
            Right(80,80);
            packetSend(packetDataSaveTrans(NULL,datastr,val4));
            }
          else if(atoi(val4)==7){
            Shache();
            packetSend(packetDataSaveTrans(NULL,datastr,val4));
            }
        break;
        default:
          DBG_UART.print("unknown type: ");
          DBG_UART.println(pkt_type, HEX);
          break;
      }
    }
    //delay(4);
  }
  if (rcv_pkt.len > 0)
    packetClear(&rcv_pkt);
  delay(150);
  }
/*
* readEdpPkt
* 从串口缓存中读数据到接收缓存
*/
bool readEdpPkt(edp_pkt *p)
{
  int tmp;
  if ((tmp = WIFI_UART.readBytes(p->data + p->len, sizeof(p->data))) > 0 )
  {
    rcvDebug(p->data + p->len, tmp);
    p->len += tmp;
  }
  return true;
}
/*
* packetSend
* 将待发数据发送至串口，并释放到动态分配的内存
*/
void packetSend(edp_pkt* pkt)
{
  if (pkt != NULL)
  {
    WIFI_UART.write(pkt->data, pkt->len);    //串口发送
    WIFI_UART.flush();
    free(pkt);              //回收内存
  }
}
void rcvDebug(unsigned char *rcv, int len)
{
  int i;
  DBG_UART.print("rcv len: ");
  DBG_UART.println(len, DEC);
  for (i = 0; i < len; i++)
  {
    DBG_UART.print(rcv[i], HEX);
    DBG_UART.print(" ");
  }
  DBG_UART.println("");
}
